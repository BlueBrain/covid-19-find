
# contains function definitions for covid simulation
# author:  JP Vergara

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


def plot_results(compartment,num_tests, days,num_isolated,num_infected,new_tested,infected_not_isolated,confirmed,deaths,susceptibles):
    
    fig = plt.figure()
   # ax = fig.add_subplot(111)
   # width=0.8
   #  ax.set_title(title)
   # plt.plot(days,num_isolated,color='b', label="Num_isolated")
    plt.plot (days, num_infected,color='r',label="Num_infected")
   # plt.plot (days, confirmed,color='g',label="Confirmed cases")
   # plt.plot (days, infected_not_isolated,color='y',label="Infected_not_isolated")
   # plt.plot (days, deaths,color='k',label="Deaths")
   # plt.gca().set_ylim(0, 0.40)
    plt.title(compartment+' - Infected: Num_tests='+ str(num_tests)+' per day')
    plt.ylabel('Number')
    plt.xlabel('Day')
    plt.legend(title= "Legend")
    plt.show()
    plt.close()
    plt.plot (days, deaths,color='k',label="Deaths")
    plt.title(compartment+' - Deaths; Num_tests='+ str(num_tests)+' per day')
    plt.ylabel('Number')
    plt.xlabel('Day')
    plt.legend(title= "Legend")
    plt.show()
    plt.close()
    plt.plot(days,num_isolated,color='b', label="Num_isolated")
    plt.title(compartment+' - Isolated; Num_tests='+ str(num_tests)+' per day')
    plt.ylabel('Number')
    plt.xlabel('Day')
    plt.legend(title= "Legend")
    plt.show()
    plt.close()
    plt.plot(days,susceptibles,color='c', label="Susceptibles")
    plt.title(compartment+' - Susceptibles; Num_tests='+ str(num_tests)+' per day')
    plt.ylabel('Number')
    plt.xlabel('Day')
    plt.legend(title= "Legend")
    plt.show()
    plt.close()
    

def simulate(num_compartments,params,beta):
   num_days = int(params['num_days'][0])
   inversion_date = int(params['inversion_date'][0])
   beta_pre_inversion = float(params['beta_pre_inversion'][0])
   alpha_post_inversion = float(params['alpha_post_inversion'][0])
   latent_period =  int(params['latent_period'][0])
   incubation_period =  int(params['incubation_period'][0])
   infective_period = int(params['infective_period'][0])
   confirmation_rate = float(params['confirmation_rate'][0])
   gamma = float(params['gamma'][0])
   recovery_period = int(params['recovery_period'] [0])
   tau = float(params['tau'][0])
   death_period = int(params['death_period'][0])
   test_start = int(params['test_start'][0])
   true_positive_rate = float(params['true_positive_rate'][0])
   false_positive_rate = float(params['false_positive_rate'][0])
   test_symptomatic_only = params['test_symptomatic_only'][0] == 'True'
   p_positive_if_symptomatic = float(params['p_positive_if_symptomatic'][0])

   compartment = []
   init_pop = np.zeros(num_days)
   init_infected = np.zeros(num_days)
   num_tests = np.zeros(num_days)
   for i in range(0,num_compartments):
        compartment.append(params['compartment'][i])
        init_pop[i] = params['init_pop'][i]
        init_infected[i] = params['init_infected'][i] 
        num_tests[i]=params['num_tests'][i]
# =============================================================================
 # Initialize arrays storing time series
   days=np.zeros(num_days)
   beta_arr = np.zeros((num_days,num_compartments))
   infected = np.zeros((num_days,num_compartments))
   infectednotisolated=np.zeros((num_days,num_compartments))
   newinfected = np.zeros((num_days,num_compartments))
   tested=np.zeros((num_days,num_compartments))
   newtested=np.zeros((num_days,num_compartments))
   newisolated=np.zeros((num_days,num_compartments))
   newisolatedinfected=np.zeros((num_days,num_compartments))
   isolatedinfected=np.zeros((num_days,num_compartments))
   isolated=np.zeros((num_days,num_compartments))
   susceptibles = np.zeros((num_days,num_compartments))
   recovered = np.zeros((num_days,num_compartments))
   newrecovered = np.zeros((num_days,num_compartments))
   confirmed = np.zeros((num_days,num_compartments))
   newconfirmed = np.zeros((num_days,num_compartments))
   deaths = np.zeros((num_days,num_compartments))
   newdeaths = np.zeros((num_days,num_compartments))
   population = np.zeros((num_days,num_compartments))
   susceptible_prop =np.ones((num_days,num_compartments))
   newinfected=np.zeros((num_days,num_compartments))
        # number of infected generated by compartment i in compartment j
   compart_newinfected=np.zeros((num_days,num_compartments,num_compartments))

   for i in range(num_compartments):
      newinfected[0,i]=init_infected[i] # note: orig code effectively has newinfected[0,i]=0
      population[0,i] = init_pop[i]
      susceptibles[0,i] = init_pop[i]-init_infected[i]
      if susceptibles[0,i]<0:
          susceptibles[0,i]=0
  #    susceptible_prop[0,i] = susceptibles[0,i]/population[0,i]
      infected[0,i] = newinfected[0,i]
      infectednotisolated[0,i]=init_infected[i]
  #    print('i=',i,'infectednotisolated)=',infectednotisolated[0,i],)

   alpha=beta/alpha_post_inversion

   totaldeaths=np.zeros(num_compartments)
   maxinfected=np.zeros(num_compartments)
   maxisolated=np.zeros(num_compartments)
   totalisolated=np.zeros(num_compartments)
  
    # calculate new infections day by day for each compartment

   for t in range(1,num_days):
      days[t]=t
      #adjust value of betas - we assume they fall linearly with time after the intervention
      if t > inversion_date:
          for i in range (0,num_compartments):
              for j in range(0,num_compartments):
                  if beta[i,j]-alpha[i,j] > 0:
                      beta[i,j]=beta[i,j]-alpha[i,j]
                  else:
                      beta[i,j] = 0
      # add up number of new infected for each compartment - total correct at end of loops
      for i in range(0,num_compartments): #this is the compartment doing the infecting
          newinfected[t,i]=0
          for j in range(0, num_compartments):      
      # beta_arr[t] = beta #this is legacy code
            #This computes how many infections compart i will cause in compartment j 
              compart_newinfected[t,i,j] = infectednotisolated[t-1,i]*beta[i,j]*susceptible_prop[t-1,j] #this records how many new infections compart i will cause in compart j 
           #   print ('i=',i,'j=',j,'compart_new=', compart_newinfected[t,i,j])
        #following block is suprermely ugly - but I still haven't mastered numpy sums
      
      for i in range(0,num_compartments): #now each compartment adds up the total of new infections
    
          newinfected[t,i]=0
          for j in range(0,num_compartments):
            newinfected[t,i]=newinfected[t,i]+compart_newinfected[t,j,i]  
       
      for i in range(0,num_compartments): 
#          if (i==0):
#              print('t=',t,'new infections',newinfected[t,i],'susceptibles=',susceptibles[t-1,i],'susc prop=',susceptible_prop[t-1,i])   
          tested[t,i]=num_tests[i]
          if t < test_start:
             newtested[t,i] = 0
             newisolated[t,i] = 0
             newisolatedinfected[t,i] =  0
          else:
             if population[t-1,i] >= num_tests[i]:
                newtested[t,i] = num_tests[i]
             else:
                newtested[t,i] = population[t-1,i]
          if test_symptomatic_only:
            true_positives = newtested[t,i] * p_positive_if_symptomatic * true_positive_rate
            false_positives = newtested[t,i] * (1-p_positive_if_symptomatic) * false_positive_rate
           
          else:
            true_positives = newtested[t,i] * infectednotisolated[t-1,i]/population[t-1,i] * true_positive_rate
            if true_positives>infectednotisolated[t-1,i]:
                true_positives=infectednotisolated[t-1,i]
            false_positives=0 #inserted for test purposes only - did not remove problem
            #false_positives = newtested[t,i] * susceptible_prop[t-1,i]*false_positive_rate
            #print('t=',t,'i=',i,'newtested',newtested[t,i], 'infected',infected[t-1,i],'population',population[t-1,i], 'true positives=',true_positives)
             

         # Put all positive cases into isolation
     #     print ('true_positives=',true_positives)
          newisolated[t,i] = true_positives+false_positives
          newisolatedinfected[t,i] = true_positives
          newrecovered[t,i] = 0
          if t >= recovery_period:
             newrecovered[t,i] = newinfected[t-recovery_period,i]*gamma
          newdeaths[t,i] = 0
          if t >= death_period:
              newdeaths[t,i] = newinfected[t-death_period,i]*tau
          else:
              newdeaths[t,i]=0
          newconfirmed[t,i] = newisolated[t,i]
          infected[t,i] = infected[t-1,i]+newinfected[t,i]-newrecovered[t,i]-newdeaths[t,i]
          if infected[t,i]<0:
              infected[t,i]=0
          recovered[t,i] = recovered[t-1,i]+newrecovered[t-1,i]
          susceptibles[t,i] = susceptibles[t-1,i]-newinfected[t-1,i]
          if susceptibles[t,i]<0:  #defensive programming - I don't know why they go negative but they do
              susceptibles[t,i]=0
          population[t,i] = population[t-1,i]-newdeaths[t,i]
          susceptible_prop[t,i] = susceptibles[t,i]/population[t,i]
          deaths[t,i] = deaths[t-1,i]+newdeaths[t,i]
# =============================================================================
#       newinfected[t] = new_infections
#       newrecovered[t] = new_recoveries
#       newdeaths[t] = new_deaths
# =============================================================================
          tested[t,i] = tested[t-1,i] + newtested[t-1,i]
      #newconfirmed[t,i] = new_confirmed_cases
          confirmed[t,i]=confirmed[t-1,i] + newconfirmed[t,i]  # JPV changed
      #newisolated[t] = new_isolated
      #newisolatedinfected[t] = new_isolated_infected
          if t >= recovery_period:
             isolated[t,i] = isolated[t-1,i] + newisolated[t-1,i] - newisolated[t-recovery_period,i]
# =============================================================================
#              if i==0:
#                  print('t=',t,'i=',i,'isolated_t=',isolated[t-1,i],'newisolated',newisolated[t-1,i],'recovered',newisolated[t-recovery_period,i])
# =============================================================================
             isolatedinfected[t,i] = isolatedinfected[t-1,i] + newisolatedinfected[t-1,i] - newisolatedinfected[t-recovery_period,i] # JPV changed
          else:
             isolated[t,i] = isolated[t-1,i] + newisolated[t-1,i]
             isolatedinfected[t,i] = isolatedinfected[t-1,i] + newisolatedinfected[t-1,i]
             
          if infected[t,i] - isolated[t,i] > 0:
             infectednotisolated[t,i] = infected[t,i] - isolated[t,i]
          else:
             infectednotisolated[t,i] = 0

# =============================================================================
   df = pd.DataFrame({
         'days': range(0,num_days),
         'compartment': np.full(num_days,compartment[0]),
         'population' : np.round(population[:,0],1),
         'susceptibles' : np.round(susceptibles[:,0],1),
         'total_isolated': np.round(isolated[:,0],1),
         'total_infected': np.round(infected[:,0],1),
         'tested': np.round(tested[:,0],1),
         'total_infected_notisolated': np.round(infectednotisolated[:,0],1),
         'total_confirmed': np.round(confirmed[:,0],1),
         'total_deaths': np.round(deaths[:,0],1),
         'total_recovered': np.round(recovered[:,0],1),
         'beta': np.round(beta_arr[:,0],5),
         'susceptible_prop' : np.round(susceptible_prop[:,0],1),
         'new_tested': np.round(newtested[:,0],1),
         'num_infected': np.round(newinfected[:,0],1),
         'num_isolated': np.round(newisolated[:,0],1),
         'num_isolated_infected': np.round(newisolatedinfected[:,0],1),
         'num_confirmed': np.round(newconfirmed[:,0],1),
         'num_recovered': np.round(newrecovered[:,0],1),
         'num_deaths': np.round(newdeaths[:,0],1)
        })
   for i in range(1,num_compartments):
      dfadd = pd.DataFrame({
         'days': range(0,num_days),
         'compartment': np.full(num_days,compartment[i]),
         'population' : np.round(population[:,i],1),
         'susceptibles' : np.round(susceptibles[:,i],1),
         'total_isolated': np.round(isolated[:,i],1),
         'total_infected': np.round(infected[:,i],1),
         'tested': np.round(tested[:,i],1),
         'total_infected_notisolated': np.round(infectednotisolated[:,i],1),
         'total_confirmed': np.round(confirmed[:,i],1),
         'total_deaths': np.round(deaths[:,i],1),
         'total_recovered': np.round(recovered[:,i],1),
         'beta': np.round(beta_arr[:,i],5),
         'susceptible_prop' : np.round(susceptible_prop[:,i],1),
         'new_tested': np.round(newtested[:,i],1),
         'num_infected': np.round(newinfected[:,i],1),
         'num_isolated': np.round(newisolated[:,i],1),
         'num_isolated_infected': np.round(newisolatedinfected[:,i],1),
         'num_confirmed': np.round(newconfirmed[:,i],1),
         'num_recovered': np.round(newrecovered[:,i],1),
         'num_deaths': np.round(newdeaths[:,i],1)
        })
      df = df.append(dfadd)
# =============================================================================
   return df

